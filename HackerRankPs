Hacker Rank Problem Solving Answer;

//Simple Array Sum

static int simpleArraySum(int[] ar) {
        int sum =0;
        for(int i =0;i<ar.length;i++){
            sum+=ar[i];
        }
        return sum;

    }
	
	
//Compare Triplet function

    // Complete the compareTriplets function below.
    static List<Integer> compareTriplets(List<Integer> a, List<Integer> b) {
            int alice =0;
            int bob = 0;
            for(int i =0;i<a.size();i++){
                if(a.get(i)>b.get(i)){
                    alice++;
                }else if(a.get(i)<b.get(i)){
                    bob++;
                }
                
                
            }
            List<Integer> list = new ArrayList<Integer>();
            list.add(alice);
            list.add(bob);
            return list;

    }
	
//Diagonal Difeerence

 public static int diagonalDifference(List<List<Integer>> arr) {
        int first=0;
        int last =0;
        int n = arr.size();
        for(int i=0;i<n;i++){
            first+=arr.get(i).get(i);
            last+=arr.get(i).get(n-i-1);
        }
        
        return (Math.abs(first-last));
    }
	
//PlusMinus Problem


 static void plusMinus(int[] arr) {
         
        int zero =0;
        int pos =0;
        int neg =0;
        int size =  arr.length;
        for(int i =0;i<size;i++){
            if(arr[i]==0){
                zero =zero+1;
            }else if(arr[i]<0){
                neg =neg+1;
            }else{
                pos =pos+1;
            }
        }
        System.out.printf("%.6f\n", (double)pos/size);
        System.out.printf("%.6f\n", (double)neg/size);
        System.out.printf("%.6f\n", (double)zero/size);

    }

//Statircase Pattern problem


 // Complete the staircase function below.
    static void staircase(int n) {
        for(int i =0;i<n;i++) {
            for(int j =0;j<n;j++) {
                if(j<n-i-1) {
                    System.out.print(" ");
                }
                else {
                    System.out.print("#");
                }
            }
            System.out.println("");
        }

    }

//MiniMax Problem	
	
	 // Complete the miniMaxSum function below.
    static void miniMaxSum(int[] arr) {
        long min =1000000000;
        long max =0;
        long sum =0;
        for(int i =0;i<arr.length;i++){
            sum=0;
            for(int j =0;j<arr.length;j++){
                if(i!=j){
                    sum+=Long.valueOf(arr[j]);
                }
            }
            if(i==0){
                min = sum;
            }
            if(sum>max){
                max = sum;
            }
            else if(sum<min){
                min =sum;
            }
        }
        System.out.println(min+" "+max);

    }
	

//BirthdayCake Candles problem

 // Complete the birthdayCakeCandles function below.
    static int birthdayCakeCandles(int[] ar) {
           int count =0;
            Arrays.sort(ar);
            int maxHeight = ar[(ar.length)-1];
            for(int i=0;i<ar.length;i++)
            {
                if(ar[i]==maxHeight)
                {
                    count++;
                }
            }

        return count;
    }
	
	
//Time conversion problem
static String timeConversion(String s) {

        int hour = Integer.parseInt(s.substring(0,2))%12;
        if(s.contains("PM")) hour += 12;
        return String.format("%02d%s",hour,s.substring(2,8));
    }
	
	
//lonely integer problem
 // Complete the lonelyinteger function below.
    static int lonelyinteger(int[] a) {
         int val = 0;
        for (int num : a) {
            val = val ^ num; // ^ is XOR operator
        }
        return val;

    }
	
//Kangaroo function problem

  // Complete the kangaroo function below.
    static String kangaroo(int x1, int v1, int x2, int v2) {
        if (v1 > v2) {
            
            int remainder = (x1 - x2) % (v2 - v1);
            
            if (remainder == 0) {
                return "YES";
            }
        }
        return "NO";

    }

//between two sets

  public static int getTotalX(List<Integer> a, List<Integer> b) {
    // Write your code here
      int x=1,r=0,j=0,count=0;
        int[] d = new int[101];
        for(x=1;x<101;x++){
            int c=0;
                for(int i=0;i<a.size();i++) {
                    if(x%a.get(i)==0&&x>=a.get(i)){
                        c++;
                    }
                    }
                if(c==a.size()){
                    d[j]=x;
                    r++;
                    j++;
                }
                }
        for(j=0;j<r;j++){
            int c=0;
            for(int i=0;i<b.size();i++){
                if(b.get(i)%d[j]==0){
                    c++;
                }
            }
            if(c==b.size()){
                count++;
            }
        }
        return count;

    }
	
//Breaking the REcords

 // Complete the breakingRecords function below.
    static int[] breakingRecords(int[] scores) {
        int min =0;
        int max =0;
        int minele = scores[0];
        int maxele = scores[0];
        for(int i =0;i<scores.length;i++){
            if(scores[i]>maxele){
                max++;
                maxele = scores[i];
            }else if(scores[i]<minele){
                min++;
                minele = scores[i];
            }else{

            }
        }
        int[] arr = new int[2];
        arr[0]=max;
        arr[1]=min;

        return arr;


    }
	
//Birthday  Chocolate


 // Complete the birthday function below.
    static int birthday(List<Integer> s, int d, int m) {
        int sum = 0;
        int r = 0;
        for (int i = 0; i < s.size(); i++) {
            sum += s.get(i);
            // M is never less than 1
            if (i > m - 1) sum -= s.get(i - m);
            if (i >= m - 1 && sum == d) r++;
    }
    return r;

    }

//divisible sum pairs

  // Complete the divisibleSumPairs function below.
    static int divisibleSumPairs(int n, int k, int[] ar) {
        int count =0;
        for(int i =0;i<ar.length;i++){
            for(int j=i+1;j<ar.length;j++){
                if((ar[i]+ar[j])%k==0){
                    count++;
                }
            }
        }
        return count;

    }
	
//migrating birds

// Complete the migratoryBirds function below.
    static int migratoryBirds(List<Integer> arr) {
           // Complete this function
           int n= arr.size();
        int ary[] = new int[n];
        for(int i = 0; i < n ; i++ )
        ary[arr.get(i)]++; 
        int max = 0,maxpos=0;
        for(int i = 0 ; i < n ; i++)
            {
            if(ary[i] > max)
                {
                max = ary[i];
                maxpos = i;
            }
        }
        return maxpos;
        

    }

//day of programmer problem

 // Complete the dayOfProgrammer function below.
    static String dayOfProgrammer(int year) {
        String result = "";
        if(year ==1918){
            result ="26.09.1918";
        }else{
            if((year % 4 ==0) &&(year <1918 ||year %400 == 0 || year % 100 !=0)){
                result = "12.09."+year;
            }
            else{
                result = "13.09."+year;
            }
        }

        return result;
    }
	
//BonAppetit problem	
	 // Complete the bonAppetit function below.
    static void bonAppetit(List<Integer> bill, int index, int billamount) {
        int sum =0;
            for(int i =0; i<bill.size();i++){
                if(i!=index){
                    sum +=bill.get(i);
                }
            }
            int actual = sum/2;
            if(actual == billamount){
                System.out.println("Bon Appetit");
            }
            else{
                System.out.println(billamount-actual);
            }

    }
	
	
//Sock Merchant Problem

  // Complete the sockMerchant function below.
    static int sockMerchant(int n, int[] ar) {
        int pair =0;
        Set<Integer> set=  new HashSet<Integer>();
        for(int i=0;i<ar.length;i++){
            if(!set.contains(ar[i])){
                set.add(ar[i]);
            
            }else{
                pair++;
                set.remove(ar[i]);
            }
        }
        return pair;


    }
	
//PageCount problem

/*
     * Complete the pageCount function below.
     */
    static int pageCount(int n, int p) {
        int page1 = Math.abs((p)/2);
        if(n%2==0){
            n++;
        }
        int page2 = Math.abs((p-(n))/2);
        return page1<page2?page1:page2;

    }
    
    
 //Electronics Shop
 
  /*
     * Complete the getMoneySpent function below.
     */
    static int getMoneySpent(int[] keyboards, int[] drives, int b) {
        int money =-1;
        for(int i=0;i<keyboards.length;i++){
            for(int j=0;j<drives.length;j++){
                int sum =keyboards[i]+drives[j];
                if(sum<=b && sum>money){
                    money =sum;
                }
            }
        }
        return money;

    }
    
//Cat and mouse problem

  // Complete the catAndMouse function below.
    static String catAndMouse(int x, int y, int z) {
        int posA = Math.abs(x-z);
        int posB = Math.abs(y-z);
        String res = "";
        if(posA==posB){
            res= "Mouse C";
        }else if(posA>posB){
            res = "Cat B";
        }else{
            res = "Cat A";
        }
        return res;
    }
//Forming magic square

  // Complete the formingMagicSquare function below.
    static int formingMagicSquare(int[][] s) {
         int cost = Integer.MAX_VALUE;
        int t[][] = 
                    {
                        {4,9,2,3,5,7,8,1,6},
                        {4,3,8,9,5,1,2,7,6},
                        {2,9,4,7,5,3,6,1,8},
                        {2,7,6,9,5,1,4,3,8},
                        {8,1,6,3,5,7,4,9,2},
                        {8,3,4,1,5,9,6,7,2},
                        {6,7,2,1,5,9,8,3,4},
                        {6,1,8,7,5,3,2,9,4},
                    };
        int temp = 0;
        for(int i=0;i<8;i++){
            temp = Math.abs(s[0][0]-t[i][0]) + Math.abs(s[0][1]-t[i][1]) +Math.abs(s[0][2]-t[i][2]) +Math.abs(s[1][0]-t[i][3]) + Math.abs(s[1][1]-t[i][4]) + Math.abs(s[1][2]-t[i][5])+ Math.abs(s[2][0]-t[i][6]) + Math.abs(s[2][1]-t[i][7]) + Math.abs(s[2][2]-t[i][8]);
            cost = temp<cost?temp:cost;
        }
        return cost;

    }
    
    
//picking numbers

 public static int pickingNumbers(List<Integer> a) {
    // Write your code here
     int[] count=new int[a.size()-1];
        Collections.sort(a);
        for(int i=0;i<a.size()-1;i++){
            ArrayList<Integer> arr = new ArrayList<Integer>();
            arr.add(a.get(i));
            for(int j=i+1;j<a.size();j++){
                if(Math.abs(a.get(i)-a.get(j))==0||Math.abs(a.get(i)-a.get(j))==1){
                    arr.add(a.get(j));                    
                }
                
            }
            count[i]=arr.size();
        }
        Arrays.sort(count);
        return count[count.length-1];
    }


 // Complete the climbingLeaderboard function below.
    static int[] climbingLeaderboard(int[] scores, int[] alice) {
    int[] array = of(scores).distinct().toArray();
    int i = array.length-1;
    int [] res = new int[alice.length];
    int c=0;
    for(int score: alice) {
        while(i>=0) {
            if(score>=array[i]) 
                i--;
            else {
                res[c]=i+2;
                c++;
                break;
            }
        }
        if(i<0){
            res[c]=1;
            c++;
        }
    }

    return res;

    }
    
    
  // Complete the hurdleRace function below.
    static int hurdleRace(int k, int[] height) {
        int max =0;
        for(int i=0;i<height.length;i++){
            if(k<=height[i] && height[i]-k>=max){
                max=height[i]-k;
            }
        }
        return max;


    }
    
    
    
   // Complete the designerPdfViewer function below.
    static int designerPdfViewer(int[] h, String word) {
        int length = word.length();
       // String[] str = word.split("");
        int max =0;
        for(int i =0;i<word.length();i++){
            char ch = word.charAt(i);
            int ascii = (int) ch;
            int alp = ascii-97;
            if(h[alp]>max){
                max = h[alp];
            }
        }
        int results = max * length;
        return results;
    }
